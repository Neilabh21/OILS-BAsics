
OILS with Internal EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000468  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b24  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003366  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e2  00000000  00000000  00007436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00007c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002b1a  00000000  00000000  00007d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000607  00000000  00000000  0000a886  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000ae8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	0e 94 1c 01 	call	0x238	; 0x238 <main>
 210:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <_Z8transmith>:

void transmit(uint8_t dat)
{
	// This is the transmit function using the USART functionality of ATXmega128A3U.
	// Here, we transmit the data 'dat', which has to be 8 bits of data, or 1 byte.
	while(!(USARTC0_STATUS & (USART_DREIF_bm)));		// Until data register empty interrupt flag is set, wait. (So that wrong data is not sent.)
 218:	e1 ea       	ldi	r30, 0xA1	; 161
 21a:	f8 e0       	ldi	r31, 0x08	; 8
 21c:	90 81       	ld	r25, Z
 21e:	95 ff       	sbrs	r25, 5
 220:	fd cf       	rjmp	.-6      	; 0x21c <_Z8transmith+0x4>
	USARTC0_DATA = dat;									// Load the data into the transmit buffer register. (Sends the data)
 222:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 226:	08 95       	ret

00000228 <_Z7receivev>:

uint8_t receive(void)
{
	// This is the receive function using the USART functionality of ATXmega128A3U.
	// Here, we receive data in packets of 8 bits, or a byte.
	while(!(USARTC0_STATUS & (USART_RXCIF_bm)));		// Until receive complete interrupt flag is set, wait
 228:	e1 ea       	ldi	r30, 0xA1	; 161
 22a:	f8 e0       	ldi	r31, 0x08	; 8
 22c:	80 81       	ld	r24, Z
 22e:	88 23       	and	r24, r24
 230:	ec f7       	brge	.-6      	; 0x22c <_Z7receivev+0x4>
	return USARTC0_DATA;								// Access the receive buffer register and return the contents of the buffer register.
 232:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
}
 236:	08 95       	ret

00000238 <main>:

int main(void)
{
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	1f 92       	push	r1
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	// This is the main function of the program.
	PORTC_DIRSET = PIN3_bm;								// Setting TX pin as output (C3)
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	PORTC_DIRCLR = PIN2_bm;								// Setting RX pin as input (C2)
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
	USARTC0_BAUDCTRLA = 12;								// Setting the BSEL number in the baud rate register for rate of 9600
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7008a6>
	USARTC0_BAUDCTRLB = 0;								// Setting the BSCALE = 0
 25c:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
	USARTC0_CTRLB = (USART_RXEN_bm)|(USART_TXEN_bm);	// Enable transmitter and receiver ports.
 260:	88 e1       	ldi	r24, 0x18	; 24
 262:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
	USARTC0_CTRLC = (USART_CHSIZE_8BIT_gc)|(USART_PMODE_DISABLED_gc);  // 8 bits with 1 stop bit.
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
	// 0x12345678
	
	// The actual data is to be received from Python via a start flag (From Python) followed by 4 bytes of data, which will be stored in the variables a, b, c, d.
	// That code will look something like this:
	while(1){
		uint8_t head1 = receive();
 26c:	0e 94 14 01 	call	0x228	; 0x228 <_Z7receivev>
		if (head1 == 'a'){
 270:	81 36       	cpi	r24, 0x61	; 97
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x34>
			//transmit('b');
			break;
		}
	}
	
	uint8_t a = receive();					// These are the received data from the Python Console, stored in a, b, c and d.
 274:	0e 94 14 01 	call	0x228	; 0x228 <_Z7receivev>
 278:	d8 2e       	mov	r13, r24
	uint8_t b = receive();
 27a:	0e 94 14 01 	call	0x228	; 0x228 <_Z7receivev>
 27e:	e8 2e       	mov	r14, r24
	uint8_t c = receive();
 280:	0e 94 14 01 	call	0x228	; 0x228 <_Z7receivev>
 284:	f8 2e       	mov	r15, r24
	uint8_t d = receive();
 286:	0e 94 14 01 	call	0x228	; 0x228 <_Z7receivev>
	//uint16_t address = 0x0000;
	//uint16_t address = (uint16_t)(TEST_PAGE_ADDR_1*EEPROM_PAGESIZE)|(TEST_BYTE_ADDR_a & (EEPROM_PAGESIZE-1));
	uint8_t foo = 0;
	uint8_t * address = &foo + 1;
	
	*(uint8_t*)(address+0) = a; // write a
 28a:	da 82       	std	Y+2, r13	; 0x02
	*(uint8_t*)(address+1) = b; // write b
 28c:	eb 82       	std	Y+3, r14	; 0x03
	*(uint8_t*)(address+2) = c; // write c
 28e:	fc 82       	std	Y+4, r15	; 0x04
	*(uint8_t*)(address+3) = d; // write d
 290:	8d 83       	std	Y+5, r24	; 0x05
	
	float float_input = *(float*)(address); // read float_input
 292:	ca 80       	ldd	r12, Y+2	; 0x02
 294:	db 80       	ldd	r13, Y+3	; 0x03
 296:	ec 80       	ldd	r14, Y+4	; 0x04
 298:	fd 80       	ldd	r15, Y+5	; 0x05
	
	//float float_input = *address_float;
	
	// Function Implemented here
	float float_output = float_input*float_input*float_input;
	*(float*)(address+4) = float_output; // Write float_output
 29a:	a7 01       	movw	r20, r14
 29c:	96 01       	movw	r18, r12
 29e:	c7 01       	movw	r24, r14
 2a0:	b6 01       	movw	r22, r12
 2a2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__mulsf3>
 2a6:	a7 01       	movw	r20, r14
 2a8:	96 01       	movw	r18, r12
 2aa:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__mulsf3>
 2ae:	6e 83       	std	Y+6, r22	; 0x06
 2b0:	7f 83       	std	Y+7, r23	; 0x07
 2b2:	88 87       	std	Y+8, r24	; 0x08
 2b4:	99 87       	std	Y+9, r25	; 0x09
	//*(float*)(address+4) = 3.1415927; // Write float_output // For debugging
	
	uint8_t e = *(uint8_t*)(address+4); // read e
	uint8_t f = *(uint8_t*)(address+5); // read f
 2b6:	df 80       	ldd	r13, Y+7	; 0x07
	uint8_t g = *(uint8_t*)(address+6); // read h
 2b8:	e8 84       	ldd	r14, Y+8	; 0x08
	uint8_t h = *(uint8_t*)(address+7); // read e
 2ba:	f9 84       	ldd	r15, Y+9	; 0x09
	
	transmit(e);
 2bc:	8e 81       	ldd	r24, Y+6	; 0x06
 2be:	0e 94 0c 01 	call	0x218	; 0x218 <_Z8transmith>
	transmit(f);
 2c2:	8d 2d       	mov	r24, r13
 2c4:	0e 94 0c 01 	call	0x218	; 0x218 <_Z8transmith>
	transmit(g);
 2c8:	8e 2d       	mov	r24, r14
 2ca:	0e 94 0c 01 	call	0x218	; 0x218 <_Z8transmith>
	transmit(h);
 2ce:	8f 2d       	mov	r24, r15
 2d0:	0e 94 0c 01 	call	0x218	; 0x218 <_Z8transmith>
}
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0f 90       	pop	r0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	08 95       	ret

000002e8 <__mulsf3>:
 2e8:	0e 94 87 01 	call	0x30e	; 0x30e <__mulsf3x>
 2ec:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__fp_round>
 2f0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fp_pscA>
 2f4:	38 f0       	brcs	.+14     	; 0x304 <__mulsf3+0x1c>
 2f6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__fp_pscB>
 2fa:	20 f0       	brcs	.+8      	; 0x304 <__mulsf3+0x1c>
 2fc:	95 23       	and	r25, r21
 2fe:	11 f0       	breq	.+4      	; 0x304 <__mulsf3+0x1c>
 300:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_inf>
 304:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__fp_nan>
 308:	11 24       	eor	r1, r1
 30a:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>

0000030e <__mulsf3x>:
 30e:	0e 94 09 02 	call	0x412	; 0x412 <__fp_split3>
 312:	70 f3       	brcs	.-36     	; 0x2f0 <__mulsf3+0x8>

00000314 <__mulsf3_pse>:
 314:	95 9f       	mul	r25, r21
 316:	c1 f3       	breq	.-16     	; 0x308 <__mulsf3+0x20>
 318:	95 0f       	add	r25, r21
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	55 1f       	adc	r21, r21
 31e:	62 9f       	mul	r22, r18
 320:	f0 01       	movw	r30, r0
 322:	72 9f       	mul	r23, r18
 324:	bb 27       	eor	r27, r27
 326:	f0 0d       	add	r31, r0
 328:	b1 1d       	adc	r27, r1
 32a:	63 9f       	mul	r22, r19
 32c:	aa 27       	eor	r26, r26
 32e:	f0 0d       	add	r31, r0
 330:	b1 1d       	adc	r27, r1
 332:	aa 1f       	adc	r26, r26
 334:	64 9f       	mul	r22, r20
 336:	66 27       	eor	r22, r22
 338:	b0 0d       	add	r27, r0
 33a:	a1 1d       	adc	r26, r1
 33c:	66 1f       	adc	r22, r22
 33e:	82 9f       	mul	r24, r18
 340:	22 27       	eor	r18, r18
 342:	b0 0d       	add	r27, r0
 344:	a1 1d       	adc	r26, r1
 346:	62 1f       	adc	r22, r18
 348:	73 9f       	mul	r23, r19
 34a:	b0 0d       	add	r27, r0
 34c:	a1 1d       	adc	r26, r1
 34e:	62 1f       	adc	r22, r18
 350:	83 9f       	mul	r24, r19
 352:	a0 0d       	add	r26, r0
 354:	61 1d       	adc	r22, r1
 356:	22 1f       	adc	r18, r18
 358:	74 9f       	mul	r23, r20
 35a:	33 27       	eor	r19, r19
 35c:	a0 0d       	add	r26, r0
 35e:	61 1d       	adc	r22, r1
 360:	23 1f       	adc	r18, r19
 362:	84 9f       	mul	r24, r20
 364:	60 0d       	add	r22, r0
 366:	21 1d       	adc	r18, r1
 368:	82 2f       	mov	r24, r18
 36a:	76 2f       	mov	r23, r22
 36c:	6a 2f       	mov	r22, r26
 36e:	11 24       	eor	r1, r1
 370:	9f 57       	subi	r25, 0x7F	; 127
 372:	50 40       	sbci	r21, 0x00	; 0
 374:	9a f0       	brmi	.+38     	; 0x39c <__mulsf3_pse+0x88>
 376:	f1 f0       	breq	.+60     	; 0x3b4 <__mulsf3_pse+0xa0>
 378:	88 23       	and	r24, r24
 37a:	4a f0       	brmi	.+18     	; 0x38e <__mulsf3_pse+0x7a>
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	bb 1f       	adc	r27, r27
 382:	66 1f       	adc	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	91 50       	subi	r25, 0x01	; 1
 38a:	50 40       	sbci	r21, 0x00	; 0
 38c:	a9 f7       	brne	.-22     	; 0x378 <__mulsf3_pse+0x64>
 38e:	9e 3f       	cpi	r25, 0xFE	; 254
 390:	51 05       	cpc	r21, r1
 392:	80 f0       	brcs	.+32     	; 0x3b4 <__mulsf3_pse+0xa0>
 394:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_inf>
 398:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>
 39c:	5f 3f       	cpi	r21, 0xFF	; 255
 39e:	e4 f3       	brlt	.-8      	; 0x398 <__mulsf3_pse+0x84>
 3a0:	98 3e       	cpi	r25, 0xE8	; 232
 3a2:	d4 f3       	brlt	.-12     	; 0x398 <__mulsf3_pse+0x84>
 3a4:	86 95       	lsr	r24
 3a6:	77 95       	ror	r23
 3a8:	67 95       	ror	r22
 3aa:	b7 95       	ror	r27
 3ac:	f7 95       	ror	r31
 3ae:	e7 95       	ror	r30
 3b0:	9f 5f       	subi	r25, 0xFF	; 255
 3b2:	c1 f7       	brne	.-16     	; 0x3a4 <__mulsf3_pse+0x90>
 3b4:	fe 2b       	or	r31, r30
 3b6:	88 0f       	add	r24, r24
 3b8:	91 1d       	adc	r25, r1
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	97 f9       	bld	r25, 7
 3c0:	08 95       	ret

000003c2 <__fp_inf>:
 3c2:	97 f9       	bld	r25, 7
 3c4:	9f 67       	ori	r25, 0x7F	; 127
 3c6:	80 e8       	ldi	r24, 0x80	; 128
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	08 95       	ret

000003ce <__fp_nan>:
 3ce:	9f ef       	ldi	r25, 0xFF	; 255
 3d0:	80 ec       	ldi	r24, 0xC0	; 192
 3d2:	08 95       	ret

000003d4 <__fp_pscA>:
 3d4:	00 24       	eor	r0, r0
 3d6:	0a 94       	dec	r0
 3d8:	16 16       	cp	r1, r22
 3da:	17 06       	cpc	r1, r23
 3dc:	18 06       	cpc	r1, r24
 3de:	09 06       	cpc	r0, r25
 3e0:	08 95       	ret

000003e2 <__fp_pscB>:
 3e2:	00 24       	eor	r0, r0
 3e4:	0a 94       	dec	r0
 3e6:	12 16       	cp	r1, r18
 3e8:	13 06       	cpc	r1, r19
 3ea:	14 06       	cpc	r1, r20
 3ec:	05 06       	cpc	r0, r21
 3ee:	08 95       	ret

000003f0 <__fp_round>:
 3f0:	09 2e       	mov	r0, r25
 3f2:	03 94       	inc	r0
 3f4:	00 0c       	add	r0, r0
 3f6:	11 f4       	brne	.+4      	; 0x3fc <__fp_round+0xc>
 3f8:	88 23       	and	r24, r24
 3fa:	52 f0       	brmi	.+20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fc:	bb 0f       	add	r27, r27
 3fe:	40 f4       	brcc	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 400:	bf 2b       	or	r27, r31
 402:	11 f4       	brne	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	60 ff       	sbrs	r22, 0
 406:	04 c0       	rjmp	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	08 95       	ret

00000412 <__fp_split3>:
 412:	57 fd       	sbrc	r21, 7
 414:	90 58       	subi	r25, 0x80	; 128
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	59 f0       	breq	.+22     	; 0x432 <__fp_splitA+0x10>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	71 f0       	breq	.+28     	; 0x43c <__fp_splitA+0x1a>
 420:	47 95       	ror	r20

00000422 <__fp_splitA>:
 422:	88 0f       	add	r24, r24
 424:	97 fb       	bst	r25, 7
 426:	99 1f       	adc	r25, r25
 428:	61 f0       	breq	.+24     	; 0x442 <__fp_splitA+0x20>
 42a:	9f 3f       	cpi	r25, 0xFF	; 255
 42c:	79 f0       	breq	.+30     	; 0x44c <__fp_splitA+0x2a>
 42e:	87 95       	ror	r24
 430:	08 95       	ret
 432:	12 16       	cp	r1, r18
 434:	13 06       	cpc	r1, r19
 436:	14 06       	cpc	r1, r20
 438:	55 1f       	adc	r21, r21
 43a:	f2 cf       	rjmp	.-28     	; 0x420 <__fp_split3+0xe>
 43c:	46 95       	lsr	r20
 43e:	f1 df       	rcall	.-30     	; 0x422 <__fp_splitA>
 440:	08 c0       	rjmp	.+16     	; 0x452 <__fp_splitA+0x30>
 442:	16 16       	cp	r1, r22
 444:	17 06       	cpc	r1, r23
 446:	18 06       	cpc	r1, r24
 448:	99 1f       	adc	r25, r25
 44a:	f1 cf       	rjmp	.-30     	; 0x42e <__fp_splitA+0xc>
 44c:	86 95       	lsr	r24
 44e:	71 05       	cpc	r23, r1
 450:	61 05       	cpc	r22, r1
 452:	08 94       	sec
 454:	08 95       	ret

00000456 <__fp_zero>:
 456:	e8 94       	clt

00000458 <__fp_szero>:
 458:	bb 27       	eor	r27, r27
 45a:	66 27       	eor	r22, r22
 45c:	77 27       	eor	r23, r23
 45e:	cb 01       	movw	r24, r22
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
